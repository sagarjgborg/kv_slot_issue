/**
 * Only allow one instance of the callback to run at a time for a given `scope` and `key`.
 */
export declare function withLock<ReturnType>(scope: any, key: string, callback: () => Promise<ReturnType>): Promise<ReturnType>;
/**
 * Check if a lock is currently active for a given `scope` and `key`.
 */
export declare function isLockActive(scope: any, key: string): boolean;
/**
 * Acquire a lock for a given `scope` and `key`.
 */
export declare function acquireLock<S = any, K extends string = string>(scope: S, key: K): Promise<Lock<S, K>>;
export type Lock<S = any, K extends string = string> = {
    scope: S;
    key: K;
    dispose(): void;
    [Symbol.dispose](): void;
};
